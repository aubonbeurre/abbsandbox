/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package imaging {

import org.apache.thrift.Set;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

  public class InvalidOperation extends Error implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("InvalidOperation");
    private static const WHAT_FIELD_DESC:TField = new TField("what", TType.I32, 1);
    private static const WHY_FIELD_DESC:TField = new TField("why", TType.STRING, 2);

    private var _what:int;
    public static const WHAT:int = 1;
    private var _why:String;
    public static const WHY:int = 2;

    private var __isset_what:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[WHAT] = new FieldMetaData("what", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[WHY] = new FieldMetaData("why", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
    }
    {
      FieldMetaData.addStructMetaDataMap(InvalidOperation, metaDataMap);
    }

    public function InvalidOperation() {
    }

    public function get what():int {
      return this._what;
    }

    public function set what(what:int):void {
      this._what = what;
      this.__isset_what = true;
    }

    public function unsetWhat():void {
      this.__isset_what = false;
    }

    // Returns true if field what is set (has been assigned a value) and false otherwise
    public function isSetWhat():Boolean {
      return this.__isset_what;
    }

    public function get why():String {
      return this._why;
    }

    public function set why(why:String):void {
      this._why = why;
    }

    public function unsetWhy():void {
      this.why = null;
    }

    // Returns true if field why is set (has been assigned a value) and false otherwise
    public function isSetWhy():Boolean {
      return this.why != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case WHAT:
        if (value == null) {
          unsetWhat();
        } else {
          this.what = value;
        }
        break;

      case WHY:
        if (value == null) {
          unsetWhy();
        } else {
          this.why = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case WHAT:
        return this.what;
      case WHY:
        return this.why;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case WHAT:
        return isSetWhat();
      case WHY:
        return isSetWhy();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case WHAT:
            if (field.type == TType.I32) {
              this.what = iprot.readI32();
              this.__isset_what = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case WHY:
            if (field.type == TType.STRING) {
              this.why = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WHAT_FIELD_DESC);
      oprot.writeI32(this.what);
      oprot.writeFieldEnd();
      if (this.why != null) {
        oprot.writeFieldBegin(WHY_FIELD_DESC);
        oprot.writeString(this.why);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("InvalidOperation(");
      var first:Boolean = true;

      ret += "what:";
      ret += this.what;
      first = false;
      if (!first) ret +=  ", ";
      ret += "why:";
      if (this.why == null) {
        ret += "null";
      } else {
        ret += this.why;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
