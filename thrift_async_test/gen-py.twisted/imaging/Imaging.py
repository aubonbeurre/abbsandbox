#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None

from zope.interface import Interface, implements
from twisted.internet import defer
from thrift.transport import TTwisted

class Iface(Interface):
  def mandelbrot(w, h):
    """
    A method definition looks like C code. It has a return type, arguments,
    and optionally a list of exceptions that it may throw. Note that argument
    lists and exception lists are specified using the exact same syntax as
    field lists in struct or exception definitions.

    Parameters:
     - w
     - h
    """
    pass

  def transform(t, img):
    """
    Parameters:
     - t
     - img
    """
    pass

  def xgradient(t, img):
    """
    Parameters:
     - t
     - img
    """
    pass


class Client:
  implements(Iface)

  def __init__(self, transport, oprot_factory):
    self._transport = transport
    self._oprot_factory = oprot_factory
    self._seqid = 0
    self._reqs = {}

  def mandelbrot(self, w, h):
    """
    A method definition looks like C code. It has a return type, arguments,
    and optionally a list of exceptions that it may throw. Note that argument
    lists and exception lists are specified using the exact same syntax as
    field lists in struct or exception definitions.

    Parameters:
     - w
     - h
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_mandelbrot(w, h)
    return d

  def send_mandelbrot(self, w, h):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('mandelbrot', TMessageType.CALL, self._seqid)
    args = mandelbrot_args()
    args.w = w
    args.h = h
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_mandelbrot(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = mandelbrot_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success != None:
      return d.callback(result.success)
    if result.ouch != None:
      return d.errback(result.ouch)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "mandelbrot failed: unknown result"))

  def transform(self, t, img):
    """
    Parameters:
     - t
     - img
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_transform(t, img)
    return d

  def send_transform(self, t, img):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('transform', TMessageType.CALL, self._seqid)
    args = transform_args()
    args.t = t
    args.img = img
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_transform(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = transform_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success != None:
      return d.callback(result.success)
    if result.ouch != None:
      return d.errback(result.ouch)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "transform failed: unknown result"))

  def xgradient(self, t, img):
    """
    Parameters:
     - t
     - img
    """
    self._seqid += 1
    d = self._reqs[self._seqid] = defer.Deferred()
    self.send_xgradient(t, img)
    return d

  def send_xgradient(self, t, img):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('xgradient', TMessageType.CALL, self._seqid)
    args = xgradient_args()
    args.t = t
    args.img = img
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_xgradient(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = xgradient_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success != None:
      return d.callback(result.success)
    if result.ouch != None:
      return d.errback(result.ouch)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "xgradient failed: unknown result"))


class Processor(TProcessor):
  implements(Iface)

  def __init__(self, handler):
    self._handler = Iface(handler)
    self._processMap = {}
    self._processMap["mandelbrot"] = Processor.process_mandelbrot
    self._processMap["transform"] = Processor.process_transform
    self._processMap["xgradient"] = Processor.process_xgradient

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return defer.succeed(None)
    else:
      return self._processMap[name](self, seqid, iprot, oprot)

  def process_mandelbrot(self, seqid, iprot, oprot):
    args = mandelbrot_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mandelbrot_result()
    d = defer.maybeDeferred(self._handler.mandelbrot, args.w, args.h)
    d.addCallback(self.write_results_success_mandelbrot, result, seqid, oprot)
    d.addErrback(self.write_results_exception_mandelbrot, result, seqid, oprot)
    return d

  def write_results_success_mandelbrot(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("mandelbrot", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_mandelbrot(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except InvalidOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("mandelbrot", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_transform(self, seqid, iprot, oprot):
    args = transform_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = transform_result()
    d = defer.maybeDeferred(self._handler.transform, args.t, args.img)
    d.addCallback(self.write_results_success_transform, result, seqid, oprot)
    d.addErrback(self.write_results_exception_transform, result, seqid, oprot)
    return d

  def write_results_success_transform(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("transform", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_transform(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except InvalidOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("transform", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_xgradient(self, seqid, iprot, oprot):
    args = xgradient_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = xgradient_result()
    d = defer.maybeDeferred(self._handler.xgradient, args.t, args.img)
    d.addCallback(self.write_results_success_xgradient, result, seqid, oprot)
    d.addErrback(self.write_results_exception_xgradient, result, seqid, oprot)
    return d

  def write_results_success_xgradient(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("xgradient", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_xgradient(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except InvalidOperation, ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("xgradient", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class mandelbrot_args:
  """
  Attributes:
   - w
   - h
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'w', None, None, ), # 1
    (2, TType.I32, 'h', None, None, ), # 2
  )

  def __init__(self, w=None, h=None,):
    self.w = w
    self.h = h

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.w = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.h = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mandelbrot_args')
    if self.w != None:
      oprot.writeFieldBegin('w', TType.I32, 1)
      oprot.writeI32(self.w)
      oprot.writeFieldEnd()
    if self.h != None:
      oprot.writeFieldBegin('h', TType.I32, 2)
      oprot.writeI32(self.h)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mandelbrot_result:
  """
  Attributes:
   - success
   - ouch
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ouch', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ouch=None,):
    self.success = success
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mandelbrot_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class transform_args:
  """
  Attributes:
   - t
   - img
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 't', None, None, ), # 1
    (2, TType.STRING, 'img', None, None, ), # 2
  )

  def __init__(self, t=None, img=None,):
    self.t = t
    self.img = img

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.t = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.img = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('transform_args')
    if self.t != None:
      oprot.writeFieldBegin('t', TType.I32, 1)
      oprot.writeI32(self.t)
      oprot.writeFieldEnd()
    if self.img != None:
      oprot.writeFieldBegin('img', TType.STRING, 2)
      oprot.writeString(self.img)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class transform_result:
  """
  Attributes:
   - success
   - ouch
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ouch', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ouch=None,):
    self.success = success
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('transform_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class xgradient_args:
  """
  Attributes:
   - t
   - img
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 't', None, None, ), # 1
    (2, TType.STRING, 'img', None, None, ), # 2
  )

  def __init__(self, t=None, img=None,):
    self.t = t
    self.img = img

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.t = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.img = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('xgradient_args')
    if self.t != None:
      oprot.writeFieldBegin('t', TType.I32, 1)
      oprot.writeI32(self.t)
      oprot.writeFieldEnd()
    if self.img != None:
      oprot.writeFieldBegin('img', TType.STRING, 2)
      oprot.writeString(self.img)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class xgradient_result:
  """
  Attributes:
   - success
   - ouch
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ouch', (InvalidOperation, InvalidOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ouch=None,):
    self.success = success
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('xgradient_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ouch != None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
