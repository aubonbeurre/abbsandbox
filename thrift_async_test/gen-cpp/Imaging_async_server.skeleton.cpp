// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "Imaging.h"
#include <protocol/TBinaryProtocol.h>
#include <async/TEventServer.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace imaging;

class ImagingAsyncHandler : public ImagingCobSvIf {
 public:
  ImagingAsyncHandler() {
    syncHandler_ = std::auto_ptr<ImagingHandler>(new ImagingHandler);
    // Your initialization goes here
  }
  virtual ~ImagingAsyncHandler();

  void mandelbrot(std::tr1::function<void(std::string const& _return)> cob, std::tr1::function<void(::apache::thrift::TDelayedException* _throw)> exn_cob, const int32_t w, const int32_t h) {
    std::string _return = "";
    syncHandler_->mandelbrot(_return, w, h);
    return cob(_return);
  }

  void transform(std::tr1::function<void(std::string const& _return)> cob, std::tr1::function<void(::apache::thrift::TDelayedException* _throw)> exn_cob, const Transform::type t, const std::string& img) {
    std::string _return = "";
    syncHandler_->transform(_return, t, img);
    return cob(_return);
  }

 protected:
  std::auto_ptr<ImagingHandler> syncHandler_;
};

