/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Imaging_H
#define Imaging_H

#include <TProcessor.h>
#include "imaging_types.h"

namespace imaging {

class ImagingIf {
 public:
  virtual ~ImagingIf() {}
  virtual void mandelbrot(std::string& _return, const int32_t w, const int32_t h) = 0;
  virtual void transform(std::string& _return, const Transform::type t, const std::string& img) = 0;
  virtual void xgradient(std::string& _return, const Transform::type t, const std::string& img) = 0;
};

class ImagingNull : virtual public ImagingIf {
 public:
  virtual ~ImagingNull() {}
  void mandelbrot(std::string& /* _return */, const int32_t /* w */, const int32_t /* h */) {
    return;
  }
  void transform(std::string& /* _return */, const Transform::type /* t */, const std::string& /* img */) {
    return;
  }
  void xgradient(std::string& /* _return */, const Transform::type /* t */, const std::string& /* img */) {
    return;
  }
};

typedef struct _Imaging_mandelbrot_args__isset {
  _Imaging_mandelbrot_args__isset() : w(false), h(false) {}
  bool w;
  bool h;
} _Imaging_mandelbrot_args__isset;

class Imaging_mandelbrot_args {
 public:

  Imaging_mandelbrot_args() : w(0), h(0) {
  }

  virtual ~Imaging_mandelbrot_args() throw() {}

  int32_t w;
  int32_t h;

  _Imaging_mandelbrot_args__isset __isset;

  bool operator == (const Imaging_mandelbrot_args & rhs) const
  {
    if (!(w == rhs.w))
      return false;
    if (!(h == rhs.h))
      return false;
    return true;
  }
  bool operator != (const Imaging_mandelbrot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Imaging_mandelbrot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Imaging_mandelbrot_pargs {
 public:


  virtual ~Imaging_mandelbrot_pargs() throw() {}

  const int32_t* w;
  const int32_t* h;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Imaging_mandelbrot_result__isset {
  _Imaging_mandelbrot_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _Imaging_mandelbrot_result__isset;

class Imaging_mandelbrot_result {
 public:

  Imaging_mandelbrot_result() : success("") {
  }

  virtual ~Imaging_mandelbrot_result() throw() {}

  std::string success;
  InvalidOperation ouch;

  _Imaging_mandelbrot_result__isset __isset;

  bool operator == (const Imaging_mandelbrot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Imaging_mandelbrot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Imaging_mandelbrot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Imaging_mandelbrot_presult__isset {
  _Imaging_mandelbrot_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _Imaging_mandelbrot_presult__isset;

class Imaging_mandelbrot_presult {
 public:


  virtual ~Imaging_mandelbrot_presult() throw() {}

  std::string* success;
  InvalidOperation ouch;

  _Imaging_mandelbrot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Imaging_transform_args__isset {
  _Imaging_transform_args__isset() : t(false), img(false) {}
  bool t;
  bool img;
} _Imaging_transform_args__isset;

class Imaging_transform_args {
 public:

  Imaging_transform_args() : img("") {
  }

  virtual ~Imaging_transform_args() throw() {}

  Transform::type t;
  std::string img;

  _Imaging_transform_args__isset __isset;

  bool operator == (const Imaging_transform_args & rhs) const
  {
    if (!(t == rhs.t))
      return false;
    if (!(img == rhs.img))
      return false;
    return true;
  }
  bool operator != (const Imaging_transform_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Imaging_transform_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Imaging_transform_pargs {
 public:


  virtual ~Imaging_transform_pargs() throw() {}

  const Transform::type* t;
  const std::string* img;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Imaging_transform_result__isset {
  _Imaging_transform_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _Imaging_transform_result__isset;

class Imaging_transform_result {
 public:

  Imaging_transform_result() : success("") {
  }

  virtual ~Imaging_transform_result() throw() {}

  std::string success;
  InvalidOperation ouch;

  _Imaging_transform_result__isset __isset;

  bool operator == (const Imaging_transform_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Imaging_transform_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Imaging_transform_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Imaging_transform_presult__isset {
  _Imaging_transform_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _Imaging_transform_presult__isset;

class Imaging_transform_presult {
 public:


  virtual ~Imaging_transform_presult() throw() {}

  std::string* success;
  InvalidOperation ouch;

  _Imaging_transform_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Imaging_xgradient_args__isset {
  _Imaging_xgradient_args__isset() : t(false), img(false) {}
  bool t;
  bool img;
} _Imaging_xgradient_args__isset;

class Imaging_xgradient_args {
 public:

  Imaging_xgradient_args() : img("") {
  }

  virtual ~Imaging_xgradient_args() throw() {}

  Transform::type t;
  std::string img;

  _Imaging_xgradient_args__isset __isset;

  bool operator == (const Imaging_xgradient_args & rhs) const
  {
    if (!(t == rhs.t))
      return false;
    if (!(img == rhs.img))
      return false;
    return true;
  }
  bool operator != (const Imaging_xgradient_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Imaging_xgradient_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Imaging_xgradient_pargs {
 public:


  virtual ~Imaging_xgradient_pargs() throw() {}

  const Transform::type* t;
  const std::string* img;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Imaging_xgradient_result__isset {
  _Imaging_xgradient_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _Imaging_xgradient_result__isset;

class Imaging_xgradient_result {
 public:

  Imaging_xgradient_result() : success("") {
  }

  virtual ~Imaging_xgradient_result() throw() {}

  std::string success;
  InvalidOperation ouch;

  _Imaging_xgradient_result__isset __isset;

  bool operator == (const Imaging_xgradient_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Imaging_xgradient_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Imaging_xgradient_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Imaging_xgradient_presult__isset {
  _Imaging_xgradient_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _Imaging_xgradient_presult__isset;

class Imaging_xgradient_presult {
 public:


  virtual ~Imaging_xgradient_presult() throw() {}

  std::string* success;
  InvalidOperation ouch;

  _Imaging_xgradient_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ImagingClient : virtual public ImagingIf {
 public:
  ImagingClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ImagingClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void mandelbrot(std::string& _return, const int32_t w, const int32_t h);
  void send_mandelbrot(const int32_t w, const int32_t h);
  void recv_mandelbrot(std::string& _return);
  void transform(std::string& _return, const Transform::type t, const std::string& img);
  void send_transform(const Transform::type t, const std::string& img);
  void recv_transform(std::string& _return);
  void xgradient(std::string& _return, const Transform::type t, const std::string& img);
  void send_xgradient(const Transform::type t, const std::string& img);
  void recv_xgradient(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ImagingProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ImagingIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ImagingProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_mandelbrot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transform(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xgradient(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ImagingProcessor(boost::shared_ptr<ImagingIf> iface) :
    iface_(iface) {
    processMap_["mandelbrot"] = &ImagingProcessor::process_mandelbrot;
    processMap_["transform"] = &ImagingProcessor::process_transform;
    processMap_["xgradient"] = &ImagingProcessor::process_xgradient;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ImagingProcessor() {}
};

class ImagingMultiface : virtual public ImagingIf {
 public:
  ImagingMultiface(std::vector<boost::shared_ptr<ImagingIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ImagingMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ImagingIf> > ifaces_;
  ImagingMultiface() {}
  void add(boost::shared_ptr<ImagingIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void mandelbrot(std::string& _return, const int32_t w, const int32_t h) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->mandelbrot(_return, w, h);
        return;
      } else {
        ifaces_[i]->mandelbrot(_return, w, h);
      }
    }
  }

  void transform(std::string& _return, const Transform::type t, const std::string& img) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->transform(_return, t, img);
        return;
      } else {
        ifaces_[i]->transform(_return, t, img);
      }
    }
  }

  void xgradient(std::string& _return, const Transform::type t, const std::string& img) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->xgradient(_return, t, img);
        return;
      } else {
        ifaces_[i]->xgradient(_return, t, img);
      }
    }
  }

};

} // namespace

#endif
