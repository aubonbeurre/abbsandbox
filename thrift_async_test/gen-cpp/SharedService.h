/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef SharedService_H
#define SharedService_H

#include <TProcessor.h>
#include "shared_types.h"

namespace shared {

class SharedServiceIf {
 public:
  virtual ~SharedServiceIf() {}
  virtual void getStruct(SharedStruct& _return, const int32_t key) = 0;
};

class SharedServiceNull : virtual public SharedServiceIf {
 public:
  virtual ~SharedServiceNull() {}
  void getStruct(SharedStruct& /* _return */, const int32_t /* key */) {
    return;
  }
};

typedef struct _SharedService_getStruct_args__isset {
  _SharedService_getStruct_args__isset() : key(false) {}
  bool key;
} _SharedService_getStruct_args__isset;

class SharedService_getStruct_args {
 public:

  SharedService_getStruct_args() : key(0) {
  }

  virtual ~SharedService_getStruct_args() throw() {}

  int32_t key;

  _SharedService_getStruct_args__isset __isset;

  bool operator == (const SharedService_getStruct_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SharedService_getStruct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedService_getStruct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SharedService_getStruct_pargs {
 public:


  virtual ~SharedService_getStruct_pargs() throw() {}

  const int32_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SharedService_getStruct_result__isset {
  _SharedService_getStruct_result__isset() : success(false) {}
  bool success;
} _SharedService_getStruct_result__isset;

class SharedService_getStruct_result {
 public:

  SharedService_getStruct_result() {
  }

  virtual ~SharedService_getStruct_result() throw() {}

  SharedStruct success;

  _SharedService_getStruct_result__isset __isset;

  bool operator == (const SharedService_getStruct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SharedService_getStruct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedService_getStruct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SharedService_getStruct_presult__isset {
  _SharedService_getStruct_presult__isset() : success(false) {}
  bool success;
} _SharedService_getStruct_presult__isset;

class SharedService_getStruct_presult {
 public:


  virtual ~SharedService_getStruct_presult() throw() {}

  SharedStruct* success;

  _SharedService_getStruct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SharedServiceClient : virtual public SharedServiceIf {
 public:
  SharedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SharedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getStruct(SharedStruct& _return, const int32_t key);
  void send_getStruct(const int32_t key);
  void recv_getStruct(SharedStruct& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SharedServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<SharedServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (SharedServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getStruct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SharedServiceProcessor(boost::shared_ptr<SharedServiceIf> iface) :
    iface_(iface) {
    processMap_["getStruct"] = &SharedServiceProcessor::process_getStruct;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~SharedServiceProcessor() {}
};

class SharedServiceMultiface : virtual public SharedServiceIf {
 public:
  SharedServiceMultiface(std::vector<boost::shared_ptr<SharedServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SharedServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SharedServiceIf> > ifaces_;
  SharedServiceMultiface() {}
  void add(boost::shared_ptr<SharedServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getStruct(SharedStruct& _return, const int32_t key) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getStruct(_return, key);
        return;
      } else {
        ifaces_[i]->getStruct(_return, key);
      }
    }
  }

};

} // namespace

#endif
