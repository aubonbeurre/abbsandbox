Import('env')

import sys

if sys.platform == 'win32':
    THRIFT = "J:/sources/thrift/"
    LIBEVENT = "J:/sources/libevent/"
else:
    THRIFT = "/usr/local/thrift-0.6.1/"
    LIBEVENT = "/usr/local/libevent-2.0.12/"

SRC_ROOT = env['SRC_ROOT']
BOOST_ROOT = env['BOOST_ROOT']
JPEG_ROOT = SRC_ROOT + '../lib/libjpeg/'

gensrc = [
     SRC_ROOT + 'gen-cpp/shared_constants.cpp',
     SRC_ROOT + 'gen-cpp/shared_types.cpp',
     SRC_ROOT + 'gen-cpp/SharedService.cpp',
     SRC_ROOT + 'gen-cpp/tutorial_constants.cpp',
     SRC_ROOT + 'gen-cpp/tutorial_types.cpp',
     SRC_ROOT + 'gen-cpp/Calculator.cpp',
     SRC_ROOT + 'gen-cpp/imaging_constants.cpp',
     SRC_ROOT + 'gen-cpp/imaging_types.cpp',
     SRC_ROOT + 'gen-cpp/Imaging.cpp',
]

cpppath = [
    SRC_ROOT + "gen-cpp",
    LIBEVENT + 'include',
    JPEG_ROOT,
]

cppdefines = {
     'BOOST_ALL_NO_LIB':None,
     'HAVE_CONFIG_H':None,
}

if sys.platform == 'win32':
    libpath = [
        LIBEVENT + 'build/${BUILD_PLATFORM}/%s${BUILD_TARGET}/' % ("" if env['OS32'] else "x64/"),
        THRIFT + 'build/${BUILD_PLATFORM}/%s${BUILD_TARGET}/' % ("" if env['OS32'] else "x64/"),
        THRIFT + 'build/${BUILD_PLATFORM}/%s/' % ("pthreadVC2" if env['OS32'] else "pthreadVC2_x64"),
    ]
    libs = [
        'libevent',
        'thriftnb',
        'pthreadVC2' if env['OS32'] else 'pthreadVC2_x64',
        'Ws2_32',
    ]
    cpppath += [
        LIBEVENT + 'WIN32-Code',
        LIBEVENT + 'compat',
        LIBEVENT,
        THRIFT + 'lib/cpp/src',
        THRIFT + 'build/vc10',
        BOOST_ROOT + 'boost/tr1',
        BOOST_ROOT,
    ]
    cppdefines.update({
        "_SCL_SECURE_NO_WARNINGS" : "1",
        "_SECURE_SCL" : "0",
    })
else:
    libpath = [
        THRIFT + 'lib',
        LIBEVENT + 'lib',
    ]
    libs = [
        'thrift',
        'thriftnb',
        'event',
    ]
    cpppath += [
        THRIFT + 'include/thrift',
    ]


deps = [
    'myjpeg',
    'boost_filesystem',
]

client = env.AbbProg(progname="client", sources=gensrc + [SRC_ROOT + 'CppClient.cpp',],
                        defines=cppdefines, includes=cpppath,
                        libpath=libpath, libs=libs,
                        deps=deps)
server = env.AbbProg(progname="server", sources=gensrc + [SRC_ROOT + 'CppServer.cpp',],
                        defines=cppdefines, includes=cpppath,
                        libpath=libpath, libs=libs,
                        deps=deps)

target = Alias('apps', [client, server])

Return("target")
