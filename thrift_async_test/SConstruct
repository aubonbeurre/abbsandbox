import platform
import subprocess
import re
import os
import sys

import abb.scons.builder as abbb

# Set the default -j value based on the number of processors.
SetOption('num_jobs', abbb.GetProcessorCount() + 1)

# Have SCons use its cached dependency information.
SetOption('implicit_cache', 1)

# Only re-calculate MD5 checksums if a timestamp has changed.
Decider('MD5-timestamp')

# Since we set the -j value by default, suppress SCons warnings about being
# unable to support parallel build on versions of Python with no threading.
default_warnings = ['no-no-parallel-support']
SetOption('warn', default_warnings + GetOption('warn'))

dir = Dir('.')
env = abbb.CreateAbbEnvironment(dir.abspath, ARGUMENTS)

Export('env')

if sys.platform == 'win32':
    #env['BOOST_ROOT'] = "J:/sources/thrift_3rd_party/boost/boost_1_44_0/"
    env['BOOST_ROOT'] = "J:/sources/dvamain/third_party/boost_libraries/"
else:
    env['BOOST_ROOT'] = "/home/aparente/sources/boost/"

topmake = env.SConscript('SConscript')
jpeg = env.SConscript('../lib/libjpeg/SConscript')
boost_filesystem = env.SConscript('../lib/boost_filesystem/SConscript')
boost_programoptions = env.SConscript('../lib/boost_programoptions/SConscript')

Default(Alias('all', [topmake, jpeg, boost_filesystem]))
